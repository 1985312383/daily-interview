import{_ as i,c as l,o as r,ag as e,j as t,a as n}from"./chunks/framework.UtM2fnOC.js";const m="/images/LightGBM.png",_=JSON.parse('{"title":"LightGBM面试题","description":"","frontmatter":{},"headers":[],"relativePath":"04-ai-algorithms/machine-learning/ensemble-learning/LightGBM.md","filePath":"04-ai-algorithms/machine-learning/ensemble-learning/LightGBM.md"}'),o={name:"04-ai-algorithms/machine-learning/ensemble-learning/LightGBM.md"},s={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.909ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2611.7 1000","aria-hidden":"true"},d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.909ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2611.7 1000","aria-hidden":"true"},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"27.149ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 12000 950","aria-hidden":"true"},g={tabindex:"0",class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},x={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.059ex"},xmlns:"http://www.w3.org/2000/svg",width:"47.92ex",height:"5.285ex",role:"img",focusable:"false",viewBox:"0 -1426 21180.4 2336","aria-hidden":"true"};function h(u,a,c,v,w,b){return r(),l("div",null,[a[19]||(a[19]=e('<p><img src="'+m+'" alt="LightGBM"></p><h1 id="lightgbm面试题" tabindex="-1">LightGBM面试题 <a class="header-anchor" href="#lightgbm面试题" aria-label="Permalink to &quot;LightGBM面试题&quot;">​</a></h1><h2 id="_1-简单介绍一下lightgbm�" tabindex="-1">1. 简单介绍一下LightGBM�? <a class="header-anchor" href="#_1-简单介绍一下lightgbm�" aria-label="Permalink to &quot;1. 简单介绍一下LightGBM�?&quot;">​</a></h2><p>LightGBM是一个梯�?boosting 框架，使用基于学习算法的决策树�?它可以说是分布式的，高效的�?</p><p>�?LightGBM 名字我们可以看出其是轻量级（Light）的梯度提升机（GBM），其相�?XGBoost 具有训练速度快、内存占用低的特点�?</p><p>LightGBM 是为解决GBDT训练速度慢，内存占用大的缺点，此外还提出了：</p><ul><li><p>基于Histogram的决策树算法</p></li><li><p>单边梯度采样 Gradient-based One-Side Sampling(GOSS)</p></li><li><p>互斥特征捆绑 Exclusive Feature Bundling(EFB)</p></li><li><p>带深度限制的Leaf-wise的叶子生长策�?</p></li><li><p>直接支持类别特征(Categorical Feature)</p></li><li><p>支持高效并行</p></li><li><p>Cache命中率优�?</p></li></ul><h2 id="_2-介绍一下直方图算法�" tabindex="-1">2. 介绍一下直方图算法�? <a class="header-anchor" href="#_2-介绍一下直方图算法�" aria-label="Permalink to &quot;2. 介绍一下直方图算法�?&quot;">​</a></h2><p>直方图算法就是使用直方图统计，将大规模的数据放在了直方图中，分别是每个bin�?<em>样本的梯度之�?</em> 还有就是每个bin�?<em>样本数量</em>*</p><ul><li><p>首先确定对于每一个特征需要多少个箱子并为每一个箱子分配一个整数；</p></li><li><p>将浮点数的范围均分成若干区间，区间个数与箱子个数相等</p></li><li><p>将属于该箱子的样本数据更新为箱子的�?</p></li><li><p>最后用直方图表�?</p></li></ul><p>优点�?</p><p><strong>内存占用更小</strong>：相比xgb不需要额外存储预排序，且只保存特征离散化后的�?整型)</p><p><strong>计算代价更小</strong>: 相比xgb不需要遍历一个特征值就需要计算一次分裂的增益，只需要计算k�?k为箱子的个数)</p><p>**直方图做差加�?*：一个叶子的直方图可以由它的父亲节点的直方图与它兄弟的直方图做差得到，在速度上可以提升一�?</p><h2 id="_3-介绍一下leaf-wise�-level-wise�" tabindex="-1">3. 介绍一下Leaf-wise�?Level-wise�? <a class="header-anchor" href="#_3-介绍一下leaf-wise�-level-wise�" aria-label="Permalink to &quot;3. 介绍一下Leaf-wise�?Level-wise�?&quot;">​</a></h2><p>XGBoost 采用 Level-wise，策略遍历一次数据可以同时分裂同一层的叶子，容易进行多线程优化，也好控制模型复杂度，不容易过拟合。但实际上Level-wise是一种低效的算法，因为它不加区分的对待同一层的叶子，实际上很多叶子的分裂增益较低，没必要进行搜索和分裂</p><p>LightGBM采用Leaf-wise的增长策略，该策略每次从当前所有叶子中，找到分裂增益最大的一个叶子，然后分裂，如此循环。因此同Level-wise相比，Leaf-wise的优点是：在分裂次数相同的情况下，Leaf-wise可以降低更多的误差，得到更好的精度；Leaf-wise的缺点是：可能会长出比较深的决策树，产生过拟合。因此LightGBM会在Leaf-wise之上增加了一个最大深度的限制，在保证高效率的同时防止过拟�?</p><h2 id="_4-介绍一下单边梯度采样算�-goss-�" tabindex="-1">4. 介绍一下单边梯度采样算�?GOSS)�? <a class="header-anchor" href="#_4-介绍一下单边梯度采样算�-goss-�" aria-label="Permalink to &quot;4. 介绍一下单边梯度采样算�?GOSS)�?&quot;">​</a></h2><p>GOSS算法从减少样本的角度出发，排除大部分小梯度的样本，仅用剩下的样本计算信息增益，它是一种在减少数据量和保证精度上平衡的算法。与此同时，未了不改变数据的总体分布，GOSS对要进行分裂的特征按照绝对值大小进行排序，选取最大的a个数据，在剩下梯度小的数据中选取b个，这b个数据乘以权�?\\frac{1-a}{b}$,最后使用这a+b个数据计算信息增益�?</p><h2 id="_5-介绍互斥特征捆绑算法-efb-�" tabindex="-1">5. 介绍互斥特征捆绑算法(EFB)�? <a class="header-anchor" href="#_5-介绍互斥特征捆绑算法-efb-�" aria-label="Permalink to &quot;5. 介绍互斥特征捆绑算法(EFB)�?&quot;">​</a></h2><p>互斥特征捆绑算法（Exclusive Feature Bundling, EFB）指出如果将一些特征进行融合绑定，则可以降低特征数量�? LightGBM的EFB算法将这个问题转化为图着色的问题来求解，将所有的特征视为图的各个顶点，将不是相互独立的特征用一条边连接起来，边的权重就是两个相连接的特征的总冲突值，这样需要绑定的特征就是在图着色问题中要涂上同一种颜色的那些点（特征）。另外，算法可以允许一小部分的冲突，我们可以得到更少的绑定特征，进一步提高计算效率�?</p><h2 id="_6-特征之间如何捆绑�" tabindex="-1">6. 特征之间如何捆绑�? <a class="header-anchor" href="#_6-特征之间如何捆绑�" aria-label="Permalink to &quot;6. 特征之间如何捆绑�?&quot;">​</a></h2>',22)),t("p",null,[a[6]||(a[6]=n("比如，我们在bundle中绑定了两个特征A和B，A特征的原始取值为区间 ",-1)),t("mjx-container",s,[(r(),l("svg",f,[...a[0]||(a[0]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2222.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[1]||(a[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mn",null,"0"),t("mo",null,","),t("mn",null,"10"),t("mo",{stretchy:"false"},")")])],-1))]),a[7]||(a[7]=n("，B特征的原始取值为区间",-1)),t("mjx-container",d,[(r(),l("svg",T,[...a[2]||(a[2]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2222.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[3]||(a[3]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mn",null,"0"),t("mo",null,","),t("mn",null,"20"),t("mo",{stretchy:"false"},")")])],-1))]),a[8]||(a[8]=n("，我们可以在B特征的取值上加一个偏置常�?0，将其取值范围变�?[10,30)",-1)),t("mjx-container",Q,[(r(),l("svg",p,[...a[4]||(a[4]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绑</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">特</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">征</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">范</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">围</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g></g></g>',1)])])),a[5]||(a[5]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"，"),t("mi",{mathvariant:"normal"},"绑"),t("mi",{mathvariant:"normal"},"定"),t("mi",{mathvariant:"normal"},"后"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"特"),t("mi",{mathvariant:"normal"},"征"),t("mi",{mathvariant:"normal"},"取"),t("mi",{mathvariant:"normal"},"值"),t("mi",{mathvariant:"normal"},"范"),t("mi",{mathvariant:"normal"},"围"),t("mi",{mathvariant:"normal"},"为")])],-1))]),a[9]||(a[9]=n("[0,30)$",-1))]),a[20]||(a[20]=t("h2",{id:"_7-lightgbm是怎么支持类别特征�",tabindex:"-1"},[n("7. LightGBM是怎么支持类别特征�? "),t("a",{class:"header-anchor",href:"#_7-lightgbm是怎么支持类别特征�","aria-label":'Permalink to "7. LightGBM是怎么支持类别特征�?"'},"​")],-1)),t("ul",null,[a[15]||(a[15]=t("li",null,[t("p",null,"离散特征建立直方图的过程"),t("p",null,"统计该特征下每一种离散值出现的次数，并从高到低排序，并过滤掉出现次数较少的特征�? 然后为每一个特征值，建立一个bin容器�?")],-1)),t("li",null,[a[14]||(a[14]=t("p",null,"计算分裂阈值的过程",-1)),t("ul",null,[a[13]||(a[13]=t("li",null,[t("p",null,"先看该特征下划分出的bin容器的个数，如果bin容器的数量小�?，直接使用one vs other方式, 逐个扫描每一个bin容器，找出最佳分裂点;")],-1)),t("li",null,[a[12]||(a[12]=t("p",null,"对于bin容器较多的情�? 先进行过滤，只让子集合较大的bin容器参加划分阈值计�? 对每一个符合条件的bin容器进行公式计算",-1)),t("mjx-container",g,[(r(),l("svg",x,[...a[10]||(a[10]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1429,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1774,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">容</text></g><g data-mml-node="mi" transform="translate(3374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">器</text></g><g data-mml-node="mi" transform="translate(4374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">下</text></g><g data-mml-node="mi" transform="translate(5374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(6374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(7374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">样</text></g><g data-mml-node="mi" transform="translate(8374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">本</text></g><g data-mml-node="mi" transform="translate(9374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(10374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(11374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">阶</text></g><g data-mml-node="mi" transform="translate(12374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">梯</text></g><g data-mml-node="mi" transform="translate(13374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(14374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">之</text></g><g data-mml-node="mi" transform="translate(15374,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">�</text></g><g data-mml-node="mo" transform="translate(15974,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(256,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1429,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1774,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">容</text></g><g data-mml-node="mi" transform="translate(3374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">器</text></g><g data-mml-node="mi" transform="translate(4374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">下</text></g><g data-mml-node="mi" transform="translate(5374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(6374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(7374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">样</text></g><g data-mml-node="mi" transform="translate(8374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">本</text></g><g data-mml-node="mi" transform="translate(9374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(10374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">二</text></g><g data-mml-node="mi" transform="translate(11374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">阶</text></g><g data-mml-node="mi" transform="translate(12374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">梯</text></g><g data-mml-node="mi" transform="translate(13374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(14374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">之</text></g><g data-mml-node="mi" transform="translate(15374,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g><rect width="16646" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(17108.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(18108.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">正</text></g><g data-mml-node="mi" transform="translate(19108.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">则</text></g><g data-mml-node="mi" transform="translate(20108.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">�</text></g><g data-mml-node="mo" transform="translate(20708.4,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[11]||(a[11]=t("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("mfrac",null,[t("mrow",null,[t("mi",{mathvariant:"normal"},"该"),t("mi",null,"b"),t("mi",null,"i"),t("mi",null,"n"),t("mi",{mathvariant:"normal"},"容"),t("mi",{mathvariant:"normal"},"器"),t("mi",{mathvariant:"normal"},"下"),t("mi",{mathvariant:"normal"},"所"),t("mi",{mathvariant:"normal"},"有"),t("mi",{mathvariant:"normal"},"样"),t("mi",{mathvariant:"normal"},"本"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"一"),t("mi",{mathvariant:"normal"},"阶"),t("mi",{mathvariant:"normal"},"梯"),t("mi",{mathvariant:"normal"},"度"),t("mi",{mathvariant:"normal"},"之"),t("mi",null,"�"),t("mo",null,"?")]),t("mrow",null,[t("mi",{mathvariant:"normal"},"该"),t("mi",null,"b"),t("mi",null,"i"),t("mi",null,"n"),t("mi",{mathvariant:"normal"},"容"),t("mi",{mathvariant:"normal"},"器"),t("mi",{mathvariant:"normal"},"下"),t("mi",{mathvariant:"normal"},"所"),t("mi",{mathvariant:"normal"},"有"),t("mi",{mathvariant:"normal"},"样"),t("mi",{mathvariant:"normal"},"本"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"二"),t("mi",{mathvariant:"normal"},"阶"),t("mi",{mathvariant:"normal"},"梯"),t("mi",{mathvariant:"normal"},"度"),t("mi",{mathvariant:"normal"},"之"),t("mi",{mathvariant:"normal"},"和")])]),t("mo",null,"+"),t("mi",{mathvariant:"normal"},"正"),t("mi",{mathvariant:"normal"},"则"),t("mi",null,"�"),t("mo",null,"?")])],-1))])])])]),a[16]||(a[16]=t("li",null,[t("p",null,[t("strong",null,"这里为什么不是label的均值呢？其�?label的均�?只是为了便于理解，只针对了学习一棵树且是回归问题的情况， 这时候一阶导数是Y, 二阶导数�?"),n(")，得到一个值，根据该值对bin容器从小到大进行排序，然后分从左到右、从右到左进行搜索，得到最优分裂阈值。但是有一点，没有搜索所有的bin容器，而是设定了一个搜索bin容器数量的上限值，程序中设定是32，即参数max_num_cat�?")])],-1)),a[17]||(a[17]=t("li",null,[t("p",null,"LightGBM中对离散特征实行的是many vs many 策略，这32个bin中最优划分的阈值的左边或者右边所有的bin容器就是一个many集合，而其他的bin容器就是另一个many集合�?")],-1)),a[18]||(a[18]=t("li",null,[t("p",null,"对于连续特征，划分阈值只有一个，对于离散值可能会有多个划分阈值，每一个划分阈值对应着一个bin容器编号，当使用离散特征进行分裂时，只要数据样本对应的bin容器编号在这些阈值对应的bin集合之中，这条数据就加入分裂后的左子树，否则加入分裂后的右子树�?")],-1))]),a[21]||(a[21]=e('<h2 id="_8-lightgbm的优缺点" tabindex="-1">8. LightGBM的优缺点 <a class="header-anchor" href="#_8-lightgbm的优缺点" aria-label="Permalink to &quot;8. LightGBM的优缺点&quot;">​</a></h2><p>优点�?</p><ul><li>直方图算法极大的降低了时间复杂度�?</li><li>单边梯度算法过滤掉梯度小的样本，减少了计算量�?</li><li>基于 Leaf-wise 算法的增长策略构建树，减少了计算量；</li><li>直方图算法将存储特征值转变为存储 bin 值，降低了内存消�?</li><li>互斥特征捆绑算法减少了特征数量，降低了内存消�?</li></ul><p>缺点�?</p><ul><li>LightGBM在Leaf-wise可能会长出比较深的决策树，产生过拟合</li><li>LightGBM是基于偏差的算法，所以会对噪点较为敏感；</li></ul><h2 id="_9-gbdt是如何做回归和分类的" tabindex="-1">9. GBDT是如何做回归和分类的 <a class="header-anchor" href="#_9-gbdt是如何做回归和分类的" aria-label="Permalink to &quot;9. GBDT是如何做回归和分类的&quot;">​</a></h2><ul><li><p><strong>回归</strong></p><p>生成每一棵树的时候，第一棵树的一个叶子节点内所有样本的label的均值就是这个棵树的预测值，后面根据残差再预测，最后根据将第一棵树的预测�?权重*(其它树的预测结果)</p><p>![image-20210629173116854](../../../../../Library/Application Support/typora-user-images/image-20210629173116854.png)</p></li></ul><ul><li><p><strong>分类</strong></p><p>分类时针对样本有三类的情况，</p><ul><li>首先同时训练三颗树�? <ul><li>第一棵树针对样本 x 的第一类，输入为（x, 0）�?</li><li>第二棵树输入针对样本 x 的第二类，假�?x 属于第二类，输入为（x, 1）�?</li><li>第三棵树针对样本 x 的第三类，输入为（x, 0）�?</li><li>参照 CART 的生成过程。输出三棵树�?x 类别的预测�?f1(x), f2(x), f3(x)�?</li></ul></li><li>在后面的训练中，我们仿照多分类的逻辑回归，使�?softmax 来产生概率�? <ul><li>针对类别 1 求出残差 f11(x) = 0 �?f1(x)�?</li><li>类别 2 求出残差 f22(x) = 1 �?f2(x)�?</li><li>类别 3 求出残差 f33(x) = 0 �?f3(x)�?</li></ul></li><li>然后第二轮训练， <ul><li>第一类输入为(x, f11(x))</li><li>第二类输入为(x, f22(x))</li><li>第三类输入为(x, f33(x))�?</li></ul></li><li>继续训练出三棵树，一直迭�?M 轮，每轮构建 3 棵树。当训练完毕以后，新来一个样�?x1，我们需要预测该样本的类别的时候，便可使用 softmax 计算每个类别的概率�?</li></ul></li></ul><h2 id="参考资�" tabindex="-1">参考资�? <a class="header-anchor" href="#参考资�" aria-label="Permalink to &quot;参考资�?&quot;">​</a></h2><p>深入理解LightGBM <a href="https://mp.weixin.qq.com/s/zejkifZnYXAfgTRrkMaEww" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/zejkifZnYXAfgTRrkMaEww</a></p><p>决策树（下）——XGBoost、LightGBM（非常详细） - 阿泽的文�?- 知乎 <a href="https://zhuanlan.zhihu.com/p/87885678" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/87885678</a></p><p>Lightgbm如何处理类别特征�?<a href="https://blog.csdn.net/anshuai_aw1/article/details/83275299" target="_blank" rel="noreferrer">https://blog.csdn.net/anshuai_aw1/article/details/83275299</a></p><p>LightGBM 直方图优化算法：<a href="https://blog.csdn.net/jasonwang_/article/details/80833001" target="_blank" rel="noreferrer">https://blog.csdn.net/jasonwang_/article/details/80833001</a></p>',13))])}const M=i(o,[["render",h]]);export{_ as __pageData,M as default};
